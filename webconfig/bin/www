#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var fs = require('fs');
var debug = require('debug')('nettnc:server');
var http = require('http');
var radios = require('../data/radios.json');
var raw = fs.readFileSync('direwolf.conf');
var port = normalizePort(process.env.PORT || '8040');
app.set('port', port);

var server = http.createServer(app);
var io = require('socket.io')(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


io.on('connection', function (socket) {
	console.log('socket.io connection established');
	socket.emit('direwolf',raw.toString());
	socket.emit('radios', {radios:radios});
	socket.on('radio', function (data) {
		console.log(data);
	});
	socket.on('direwolf', function( dwobj ) {
		console.log("direwolf -->\n" + dwobj);
	});
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
